    Добрый день.
    Меня зовут Евгений Алексеев. Я соискатель на вакансию Java разработчика в фирме БалтИнфоКом.
    Если не хотите читать мои придирки к тексту задания сразу переходите к разделу Техническое задание (ТЗ)...
    Если не хотите вникать в текст составленного мною для себя ТЗ и толочь ступу с водой о декомпозиции задачи, а сразу
перейти к сути, а именно как строиться алгоритм поиска групп, к пункту 3 раздела "Описание алгоритма работы программы"!

????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
                                          Не много о полученном задании
????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
    Немного о полученном от фирмы БалтИнфоКом задании.
    Качество изложения задания желает лучшего. Сразу сложилось ощущение, что автор задания просто перевёл его текст с
английского языка ни самым лучшим переводчиком и после преобразования не удосужился провести простейшую корректуру и
адаптацию изложения на русском языке. Допустим это тоже часть проверки на коммуникацию с вероятным иннозаказчиком или
проверка на работу в условиях не полной осведомлённости, - тренируем логику и самоцензора в себе.
    Но всё же прочитанный текст вызвал у меня ряд вопросов:
    1. Совсем ни понял смысла фразы: "В начале выдачи выявляются числовые результаты с более чем чем одним числом
       случаев." К чему она относится и как её понимать? А в конце выдачи все же результаты с одним случаем выдавать?
       Непонятно!
    2. То же можно сказать и о фразе: "Сверху полюбить группу с появлением новых элементов." Какая группа любит какую?
       И какая из них сверху? Что за новые элементы? Смахивает на отработку "современной повесточки" в тексте задания.
       В общем "группавуха" какая-то...
    4. Туда же формулировку: "Правоохранительные органы и должны пропускаться". Не надо обижать правоохранительные
       органы, а то они в моём лице могут и обидеться...
    5. Из фразы: "После выполнения задания необходимо отправить количество группы с более чем специализированной
       программой и время выполнения", - всё же можно подчерпнуть какую не какую полезную информацию о том что программа
       должна выдать количество групп соответствующих критерию группировки и время выполнения программы, но к чему
       относиться слово сочетание "...специализированной программой..." Неясно?

------------------------------------------------------------------------------------------------------------------------
                                                Техническое задание
------------------------------------------------------------------------------------------------------------------------
    А теперь шутки прибаутки в сторону. Так из полученного текста задания, я сам для себя сформулировал следующее
Техническое задание.

    1. Исходные данные
    1.1 Исходными данными для программы является текстовый файл в кодировке UTF-8, содержащий построчные разделители.
    1.2 Каждая строка содержит десятичные числа, выраженные в текстовом виде, заключённые в кавычки и разделённые между
        собой символами ';'. В конце строки, после последнего "числа", символ ';' не устанавливается.
    1.3 Количество "чисел" в строке нелимитированно.
    1.4 Строка может содержать "пустые" значения записанные в виде последовательности из двух символов кавычек ("").
    1.5 Файл может содержать некорректные строки не удовлетворяющие требованиям к формату строки согласно 1.2 - 1.4.

    2. Требования к программе
    Программа должна:
    2.1 Выявлять во входном файле группы строк на основании следующих критериев:
    2.1.1 Все строки в группе должны содержать одинаковые числа в одинаковой позиции от начала строки.
    2.1.2 Количество строк в группе должно быть не менее двух.
    2.1.3 Некорректные строки, подпадающие под условие 1.5 не могут входить ни в одну из групп.
    2.1.4 Каждая строка может входить в несколько групп, если она удовлетворяет требованиям 2.1.1 - 2.1.3.
    2.1.5 "Пустые" значения (по 1.4) не участвуют в формировании групп.
    2.2 Формировать выходной файл по следующим правилам
    2.2.1 Файл должен содержать выявленные программой группы строк в заданном формате:
          - вывод группы в файл начинается с заголовка состоящего из слова "Группа" и номера группы по порядку;
          - далее выводятся строки входящие в группу в исходном формате входного файла.
    2.3 При разработке на программу накладываются следующие ограничения:
    2.3.1 Проект должен собираться с помощью maven или gradle в исполняемый jar-файл.
    2.3.2 Программа должна запускаться из консоли исполнением команды следующего формата:
            java -jar {название проекта}.jar {тестовый-файл}.txt
    2.3.3 Алгоритм при выполнении программы должен работать в условиях ограничения оперативной памяти в объёме не более
          1 Гбайта. (честно, на соответствие этому требованию я проект не проверял!)
    2.3.4. Общее время исполнения программы не должно превышать 30 с.

    3. Требования к ходу, срокам и результатам работы
    3.1 Программа должна быть написана на языке Java.
    3.2 Срок выполнения одна неделя до 17.02.2023 г. включительно.
    3.3 В первую очередь Заказчику направляются следующие данные для первичного анализа:
        - количество групп выявленных программой в исходном файле;
        - время исполнения программы.
    3.4 Проект в виде исходных кодов должен быть выгружен в репозиторий Github, а ссылка на него направлена Заказчику.
    3.5 Заказчик в праве не рассматривать исходный код программы и не защитать выполнение задания, если данные по 3.3
        содержат неправильный или недостоверный ответ.

************************************************************************************************************************
                                           Описание алгоритма работы программы
************************************************************************************************************************
    1. Декомпозиция и общие положения
    После рассмотрения задания и исходного файла я сделал следующие выводы, что задачу можно разделить на три по крупные
части:
    - парсинг данных из исходного файла;
    - выявление групп в данных;
    - подготовка выходного и отчётного файлов.
    Каждая из частей программы реализована в методах parsing, grouping и create, классов FileParser, Grouper и
FileGroups соответственно и вызываются из корневого класса Main.
    Для анализа времени исполнения частей программы и всей программы в целом используются программные таймеры timer1,
timer2, timer3 и timer0.
    Далее по тексту будет приведены алгоритмы работы каждой из частей программы. Для лучшего понимания исходный текст
программы снабжён подробными комментариями

    2. Парсиг файла
    2.1 Выбор представления типов
    Одно число в файле записывается 11 символами соответственно занимает в памяти 11 байт или 88 бит, не считая кавычек
и символов разделителей. Поэтому при парсинге целесообразно перейти от символьного представления числа к бинарному.
Числа в файле не укладываются в int (32 бита), поэтому используем формат long (64 бита) или 8 байт.

    2.2 Алгоритм парсигна
    Парсинг (метод parsing класса FileParser) осуществляется при помощи сканеров: построчного сканера lineScanner и
сканера символьных полей fieldScanner, которому в качестве разделителя строковых полей назначен символ ';'.
    Выделенное из строки строковое поле добавляется в коллекцию методом Line.add(), в котором:
    - поле проверяется на соответствие формату;
    - из поля удаляются символы '"' (вырезается строка без первого и последнего символов);
    - поле проверяется на наличие цифр (при помощи регулярного выражения) и проверка на "пустое" поле.
    Если поле прошло проверки, то строковое поле преобразуется в число и добавляется в коллекцию series.
    По завершению обработки строки, корректная коллекция series записывается в коллекцию linesList.
    Для реализации коллекций series и linesList выбраны коллекции ArrayList, так как они сохраняют порядок записываемых
данных и поддерживают обращение по индексу.
    В результате выполнения метода FileParser.parsing мы получаем коллекцию linesList, содержащую коллекции из чисел и
без "плохих" строк.

    3. Группировка
    3.1 Алгоритм группировки
    Алгоритм группировки похож на метод сортировки подсчётом CountSort и выполняется за один проход по коллекции
linesList и один проход по коллекции с результатами группировки columnValuesList.
    В процессе выполнения программы каждое значение коллекций linesList+series заноситься в коллекцию columnValuesList,
которая в свою очередь включает коллекции колонок column. Занесение происходит по следующему алгоритму:
    3.1.1 Взять коллекцию series, содержащую ряд чисел из коллекции linesList.
    3.1.2 Оценить, если размер коллекции series больше размера коллекции columnValuesList, то коллекция columnValuesList
дополняется элементами новыми элементами до размера коллекции series.
    3.1.3 Далее элементы из коллекции series вносятся в одну из коллекций column в соответствии с позицией элемента в
коллекции series.
    3.1.4 Коллекция column предcтавляет собой HashMap у которого:
    - в качестве ключа используется числа из коллекции linesList+series, вносимые из соответствующей данной колонке
      позиции из коллекций series;
    - в качестве данных используется коллекция содержащая индексы строк в которых было найдено число, использованное в
      качестве ключа.
    3.1.5 После полного прохождения по коллекции linesList, учитывая свойство HashMap хранить только данные только под
уникальными ключами, в каждой коллекции column сформировался список из уникальных значений чисел встречающихся в
соответствующей позиции коллекции linesList+series. При чём в качестве данных у получивщегося HashMap будут находиться
индексы строк в которых встречаются эти числа.
    3.1.5 Далее удаляем из columnValuesList+column записи содержащие лишь единственную ссылку на строку. После этой
операции мы получаем искомый перечень групп, удовлетворяющих требованиям ТЗ.
    3.2 Ключевой момент в алгоритме группировки
    Кроме выбора структуры данных для хранения значений (в данном случае это HashMap), необходимо сделать акцент на
метод внесения новых значений в данную коллекцию, а именно ColumnValues.addToColumn. В качестве аргументов передаются
значение ключа с именем value (да согласен не очень удачное наименование, учитывая что в английском переводе пара
<ключ,значение> переводится как <key,value>...) и индекс текущей строки в коллекции linesList.
    Программа в методе ColumnValues.addToColumn пытается взять объект хранящийся под ключём value. Если такого объекта
нет, то вводимое число value новое и уникальное, что приводит к необходимости создавать новую запись в HashMap. Если
такой объект найден, то в объект добавляется значение индекса текущей строки из коллекции linesList.

    4. Подготовка файлов
    4.1 Подготовка выходного файла
    Вывод групп в файл организован достаточно просто при помощи FileWriter и PrintWriter.
    Сборка выводимых сток формируется при помощи StringBuilder, при проходе по коллекциям columnValuesList+column.
Каждая группа озаглавливается заголовком "Группа {номер группы}". В процессе вывода происходит подсчёт групп.
    4.2 Подготовка файла отчёта
    Содержит информацию о промежуточных результатов исполнения программы. Его создание не входило в основное задание,
но мне показалось, что его наличие будет удобным для анализа результатов. Так как в нём выводиться полное время
исполнения программы, то время затраченное на формирование и вывод файла отчёта не учитывается в тайминге программы.

    5. Заключение
    Задачка интересная, заставила поработать серым веществом, вспомнить забытые темы и поползать по интернету.
    Объём задействованной памяти под коллекцию linesList можно было бы и сэкономить почти в двое, поменяв тип данных
коллекций series с ArrayList на обычный Array. Но менять реализацию программы после завершения сроков выполнения считаю
не честным.
    По тексту программы добавил подробные комментарии. Надёюсь с ними будет понятнее.
    Заранее спасибо.
    Алексеев Евгений.

